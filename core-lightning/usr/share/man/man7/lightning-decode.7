.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-DECODE" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-decode -- Command for decoding an invoice string (low-level)
.SH
SYNOPSIS
.LP
\fBdecode\fR \fIstring\fR 
.SH
DESCRIPTION
.LP
Command \fIadded\fR in v23.05.
.PP
The \fBdecode\fR RPC command checks and parses \fCbolt11\fR, \fCbolt12\fR, \fCrune\fR or \fCemergency_recover\fR. It may decode other formats in future.
.IP "\(bu" 2
\fBstring\fR (string): Value to be decoded:
.RS
.IP "\(bu" 2
a \fIbolt11\fR or \fIbolt12\fR string (optionally prefixed by \fClightning:\fR or \fCLIGHTNING:\fR) as specified by the BOLT 11 and BOLT 12 specifications.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
a \fIrune\fR as created by lightning-commando-rune(7).
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
an \fIemergency_recover\fR string generated by hsmtool like \fClightning-hsmtool getemergencyrecover <path/to/emergency.recover>\fR. It holds \fCemergency.recover\fR contents and starts with \fCclnemerg1\fR.
.RE
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBtype\fR (string) (one of \(dqbolt12 offer\(dq, \(dqbolt12 invoice\(dq, \(dqbolt12 invoice_request\(dq, \(dqbolt11 invoice\(dq, \(dqrune\(dq, \(dqemergency recover\(dq): What kind of object it decoded to.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvalid\fR (boolean): If this is false, you \fIMUST\fR not use the result except for diagnostics!
.LP
If \fBtype\fR is \(dqbolt12 offer\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBoffer_id\fR (hex) (always 64 characters): The id we use to identify this offer.
- \fBoffer_chains\fR (array of hashs, optional): Which blockchains this offer is for (missing implies bitcoin mainnet only).:
- (hash, optional): The genesis blockhash.
- \fBoffer_metadata\fR (hex, optional): Any metadata the creator of the offer includes.
- \fBoffer_currency\fR (string, optional) (always 3 characters): ISO 4217 code of the currency (missing implies Bitcoin).
- \fBcurrency_minor_unit\fR (u32, optional): The number of decimal places to apply to amount (if currency known).
- \fBoffer_amount\fR (u64, optional): The amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any.
- \fBoffer_amount_msat\fR (msat, optional): The amount in bitcoin (if specified, and no \fCoffer_currency\fR).
- \fBoffer_description\fR (string, optional): The description of the purpose of the offer.
- \fBoffer_issuer\fR (string, optional): The description of the creator of the offer.
- \fBoffer_features\fR (hex, optional): The feature bits of the offer.
- \fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires.
- \fBoffer_quantity_max\fR (u64, optional): The maximum quantity (or, if 0, means any quantity).
- \fBoffer_paths\fR (array of objects, optional): Paths to the destination.:
- \fBblinding\fR (pubkey): Blinding factor for this path.
- \fBpath\fR (array of objects): An individual path.:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop.
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop.
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path.
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v23.05)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v23.05)\fR
- \fBoffer_node_id\fR (pubkey, optional): Obsolete name for offer_issuer_id. \fBdeprecated in v24.08, removed after v24.11\fR
- \fBoffer_issuer_id\fR (pubkey, optional): The pubkey associated with the offer (can be a node id). \fI(added v24.08)\fR
- \fBoffer_recurrence\fR (object, optional): How often to this offer should be used.:
- \fBtime_unit\fR (u32): The BOLT12 time unit.
- \fBperiod\fR (u32): How many \fCtime_unit\fR per payment period.
- \fBtime_unit_name\fR (string, optional): The name of \fCtime_unit\fR (if valid).
- \fBbasetime\fR (u64, optional): Period starts at this UNIX timestamp.
- \fBstart_any_period\fR (u64, optional): You can start at any period (only if \fCbasetime\fR present).
- \fBlimit\fR (u32, optional): Maximum period number for recurrence.
- \fBpaywindow\fR (object, optional): When within a period will payment be accepted. The default is prior and during the period.:
- \fBseconds_before\fR (u32): Seconds prior to period start.
- \fBseconds_after\fR (u32): Seconds after to period start.
- \fBproportional_amount\fR (boolean, optional) (always \fItrue\fR): Amount should be scaled if paid after period start.
- \fBunknown_offer_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse.:
- \fBtype\fR (u64): The type.
- \fBlength\fR (u64): The length.
- \fBvalue\fR (hex): The value.
- the following warnings are possible:
- \fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR).
- \fBwarning_empty_blinded_path\fR: The blinded path has 0 hops. \fI(added v24.08)\fR
.PP
If \fBtype\fR is \(dqbolt12 offer\(dq, and \fBvalid\fR is \fIfalse\fR:
- the following warnings are possible:
- \fBwarning_missing_offer_node_id\fR: \fCoffer_node_id\fR is not present. \fBdeprecated in v24.08, removed after v24.11\fR
- \fBwarning_missing_offer_issuer_id\fR: \fCoffer_issuer_id\fR is not present and there are no offer_paths \fI(added v24.08)\fR
- \fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8.
- \fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present.
- \fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8.
- \fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8.
.PP
If \fBtype\fR is \(dqbolt12 invoice_request\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBinvreq_metadata\fR (hex): The payer-provided blob to derive invreq_payer_id.
- \fBinvreq_payer_id\fR (hex): The payer-provided key.
- \fBsignature\fR (bip340sig): BIP-340 signature of the \fCinvreq_payer_id\fR on this invoice_request.
- \fBoffer_id\fR (hex, optional) (always 64 characters): The id we use to identify this offer.
- \fBoffer_chains\fR (array of hexs, optional): Which blockchains this offer is for (missing implies bitcoin mainnet only).:
- (hex, optional) (always 64 characters): The genesis blockhash.
- \fBoffer_metadata\fR (hex, optional): Any metadata the creator of the offer includes.
- \fBoffer_currency\fR (string, optional) (always 3 characters): ISO 4217 code of the currency (missing implies Bitcoin).
- \fBcurrency_minor_unit\fR (u32, optional): The number of decimal places to apply to amount (if currency known).
- \fBoffer_amount\fR (u64, optional): The amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any.
- \fBoffer_amount_msat\fR (msat, optional): The amount in bitcoin (if specified, and no \fCoffer_currency\fR).
- \fBoffer_description\fR (string, optional): The description of the purpose of the offer.
- \fBoffer_issuer\fR (string, optional): The description of the creator of the offer.
- \fBoffer_features\fR (hex, optional): The feature bits of the offer.
- \fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires.
- \fBoffer_quantity_max\fR (u64, optional): The maximum quantity (or, if 0, means any quantity).
- \fBoffer_paths\fR (array of objects, optional): Paths to the destination.:
- \fBblinding\fR (pubkey): Blinding factor for this path.
- \fBpath\fR (array of objects): An individual path.:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop.
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop.
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path.
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v23.05)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v23.05)\fR
- \fBoffer_node_id\fR (pubkey, optional): Public key of the offering node. \fBdeprecated in v24.08, removed after v24.11\fR
- \fBoffer_issuer_id\fR (pubkey, optional): Public key of the offering node (can be a node id). \fI(added v24.08)\fR
- \fBoffer_recurrence\fR (object, optional): How often to this offer should be used.:
- \fBtime_unit\fR (u32): The BOLT12 time unit.
- \fBperiod\fR (u32): How many \fCtime_unit\fR per payment period.
- \fBtime_unit_name\fR (string, optional): The name of \fCtime_unit\fR (if valid).
- \fBbasetime\fR (u64, optional): Period starts at this UNIX timestamp.
- \fBstart_any_period\fR (u64, optional): You can start at any period (only if \fCbasetime\fR present).
- \fBlimit\fR (u32, optional): Maximum period number for recurrence.
- \fBpaywindow\fR (object, optional): When within a period will payment be accepted. The default is prior and during the period.:
- \fBseconds_before\fR (u32): Seconds prior to period start.
- \fBseconds_after\fR (u32): Seconds after to period start.
- \fBproportional_amount\fR (boolean, optional) (always \fItrue\fR): Amount should be scaled if paid after period start.
- \fBinvreq_chain\fR (hex, optional) (always 64 characters): Which blockchain this offer is for (missing implies bitcoin mainnet only).
- \fBinvreq_amount_msat\fR (msat, optional): The amount the invoice should be for.
- \fBinvreq_features\fR (hex, optional): The feature bits of the invoice_request.
- \fBinvreq_quantity\fR (u64, optional): The number of items to invoice for.
- \fBinvreq_payer_note\fR (string, optional): A note attached by the payer.
- \fBinvreq_paths\fR (array of objects, optional): Paths to the destination. \fI(added v24.08)\fR:
- \fBblinding\fR (pubkey): Blinding factor for this path. \fI(added v24.08)\fR
- \fBpath\fR (array of objects): An individual path. \fI(added v24.08)\fR:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop. \fI(added v24.08)\fR
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop. \fI(added v24.08)\fR
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path. \fI(added v24.08)\fR
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v24.08)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v24.08)\fR
- \fBinvreq_recurrence_counter\fR (u32, optional): Which number request this is for the same invoice.
- \fBinvreq_recurrence_start\fR (u32, optional): When we're requesting to start an invoice at a non-zero period.
- \fBunknown_invoice_request_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse.:
- \fBtype\fR (u64): The type.
- \fBlength\fR (u64): The length.
- \fBvalue\fR (hex): The value.
- the following warnings are possible:
- \fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR).
.PP
If \fBtype\fR is \(dqbolt12 invoice_request\(dq, and \fBvalid\fR is \fIfalse\fR:
- the following warnings are possible:
- \fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8.
- \fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present.
- \fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8.
- \fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8.
- \fBwarning_missing_invreq_metadata\fR: \fCinvreq_metadata\fR is not present.
- \fBwarning_missing_invreq_payer_id\fR: \fCinvreq_payer_id\fR is not present.
- \fBwarning_invalid_invreq_payer_note\fR: \fCinvreq_payer_note\fR is not valid UTF8.
- \fBwarning_missing_invoice_request_signature\fR: \fCsignature\fR is not present.
- \fBwarning_invalid_invoice_request_signature\fR: Incorrect \fCsignature\fR.
.PP
If \fBtype\fR is \(dqbolt12 invoice\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBinvreq_metadata\fR (hex): The payer-provided blob to derive invreq_payer_id.
- \fBinvreq_payer_id\fR (hex): The payer-provided key.
- \fBinvoice_paths\fR (array of objects): Paths to pay the destination.:
- \fBblinding\fR (pubkey): Blinding factor for this path.
- \fBpayinfo\fR (object):
- \fBfee_base_msat\fR (msat): Basefee for path.
- \fBfee_proportional_millionths\fR (u32): Proportional fee for path.
- \fBcltv_expiry_delta\fR (u32): CLTV delta for path.
- \fBfeatures\fR (hex): Features allowed for path.
- \fBpath\fR (array of objects): An individual path.:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop.
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop.
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path.
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v23.05)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v23.05)\fR
- \fBinvoice_created_at\fR (u64): The UNIX timestamp of invoice creation.
- \fBinvoice_payment_hash\fR (hex) (always 64 characters): The hash of the \fIpayment_preimage\fR.
- \fBinvoice_amount_msat\fR (msat): The amount required to fulfill invoice.
- \fBsignature\fR (bip340sig): BIP-340 signature of the \fCoffer_issuer_id\fR on this invoice.
- \fBoffer_id\fR (hex, optional) (always 64 characters): The id we use to identify this offer.
- \fBoffer_chains\fR (array of hexs, optional): Which blockchains this offer is for (missing implies bitcoin mainnet only).:
- (hex, optional) (always 64 characters): The genesis blockhash.
- \fBoffer_metadata\fR (hex, optional): Any metadata the creator of the offer includes.
- \fBoffer_currency\fR (string, optional) (always 3 characters): ISO 4217 code of the currency (missing implies Bitcoin).
- \fBcurrency_minor_unit\fR (u32, optional): The number of decimal places to apply to amount (if currency known).
- \fBoffer_amount\fR (u64, optional): The amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any.
- \fBoffer_amount_msat\fR (msat, optional): The amount in bitcoin (if specified, and no \fCoffer_currency\fR).
- \fBoffer_description\fR (string, optional): The description of the purpose of the offer.
- \fBoffer_issuer\fR (string, optional): The description of the creator of the offer.
- \fBoffer_features\fR (hex, optional): The feature bits of the offer.
- \fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires.
- \fBoffer_quantity_max\fR (u64, optional): The maximum quantity (or, if 0, means any quantity).
- \fBoffer_paths\fR (array of objects, optional): Paths to the destination.:
- \fBblinding\fR (pubkey): Blinding factor for this path.
- \fBpath\fR (array of objects): An individual path.:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop.
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop.
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path.
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v23.05)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v23.05)\fR
- \fBoffer_node_id\fR (pubkey, optional): Public key of the offering node. \fBdeprecated in v24.08, removed after v24.11\fR
- \fBoffer_issuer_id\fR (pubkey, optional): Public key of the offering node (can be a node id). \fI(added v24.08)\fR
- \fBoffer_recurrence\fR (object, optional): How often to this offer should be used.:
- \fBtime_unit\fR (u32): The BOLT12 time unit.
- \fBperiod\fR (u32): How many \fCtime_unit\fR per payment period.
- \fBtime_unit_name\fR (string, optional): The name of \fCtime_unit\fR (if valid).
- \fBbasetime\fR (u64, optional): Period starts at this UNIX timestamp.
- \fBstart_any_period\fR (u64, optional): You can start at any period (only if \fCbasetime\fR present).
- \fBlimit\fR (u32, optional): Maximum period number for recurrence.
- \fBpaywindow\fR (object, optional): When within a period will payment be accepted. The default is prior and during the period.:
- \fBseconds_before\fR (u32): Seconds prior to period start.
- \fBseconds_after\fR (u32): Seconds after to period start.
- \fBproportional_amount\fR (boolean, optional) (always \fItrue\fR): Amount should be scaled if paid after period start.
- \fBinvreq_chain\fR (hex, optional) (always 64 characters): Which blockchain this offer is for (missing implies bitcoin mainnet only).
- \fBinvreq_amount_msat\fR (msat, optional): The amount the invoice should be for.
- \fBinvreq_features\fR (hex, optional): The feature bits of the invoice_request.
- \fBinvreq_quantity\fR (u64, optional): The number of items to invoice for.
- \fBinvreq_payer_note\fR (string, optional): A note attached by the payer.
- \fBinvreq_paths\fR (array of objects, optional): Paths to the destination. \fI(added v24.08)\fR:
- \fBblinding\fR (pubkey): Blinding factor for this path. \fI(added v24.08)\fR
- \fBpath\fR (array of objects): An individual path. \fI(added v24.08)\fR:
- \fBblinded_node_id\fR (pubkey): Node_id of the hop. \fI(added v24.08)\fR
- \fBencrypted_recipient_data\fR (hex): Encrypted TLV entry for this hop. \fI(added v24.08)\fR
- \fBfirst_node_id\fR (pubkey, optional): The (presumably well-known) public key of the start of the path. \fI(added v24.08)\fR
- \fBfirst_scid\fR (short_channel_id, optional): the short channel id of the start of the path (alternative to first_node_id) \fI(added v24.08)\fR
- \fBfirst_scid_dir\fR (u32, optional): which end of the first_scid is the start of the path \fI(added v24.08)\fR
- \fBinvreq_recurrence_counter\fR (u32, optional): Which number request this is for the same invoice.
- \fBinvreq_recurrence_start\fR (u32, optional): When we're requesting to start an invoice at a non-zero period.
- \fBinvoice_relative_expiry\fR (u32, optional): The number of seconds after \fIinvoice_created_at\fR when this expires.
- \fBinvoice_fallbacks\fR (array of objects, optional): Onchain addresses.:
- \fBversion\fR (u8): Segwit address version.
- \fBhex\fR (hex): Raw encoded segwit address.
- \fBaddress\fR (string, optional): Bech32 segwit address.
- \fBinvoice_features\fR (hex, optional): The feature bits of the invoice.
- \fBinvoice_node_id\fR (pubkey, optional): The id to pay (usually the same as offer_issuer_id).
- \fBinvoice_recurrence_basetime\fR (u64, optional): The UNIX timestamp to base the invoice periods on.
- \fBunknown_invoice_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse.:
- \fBtype\fR (u64): The type.
- \fBlength\fR (u64): The length.
- \fBvalue\fR (hex): The value.
- the following warnings are possible:
- \fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR).
.PP
If \fBtype\fR is \(dqbolt12 invoice\(dq, and \fBvalid\fR is \fIfalse\fR:
- \fBfallbacks\fR (array of objects, optional):
- the following warnings are possible:
- \fBwarning_invoice_fallbacks_version_invalid\fR: \fCversion\fR is > 16.
- the following warnings are possible:
- \fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8.
- \fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present.
- \fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8.
- \fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8.
- \fBwarning_missing_invreq_metadata\fR: \fCinvreq_metadata\fR is not present.
- \fBwarning_invalid_invreq_payer_note\fR: \fCinvreq_payer_note\fR is not valid UTF8.
- \fBwarning_missing_invoice_paths\fR: \fCinvoice_paths\fR is not present.
- \fBwarning_missing_invoice_blindedpay\fR: \fCinvoice_blindedpay\fR is not present.
- \fBwarning_missing_invoice_created_at\fR: \fCinvoice_created_at\fR is not present.
- \fBwarning_missing_invoice_payment_hash\fR: \fCinvoice_payment_hash\fR is not present.
- \fBwarning_missing_invoice_amount\fR: \fCinvoice_amount\fR is not present.
- \fBwarning_missing_invoice_recurrence_basetime\fR: \fCinvoice_recurrence_basetime\fR is not present.
- \fBwarning_missing_invoice_node_id\fR: \fCinvoice_node_id\fR is not present.
- \fBwarning_missing_invoice_signature\fR: \fCsignature\fR is not present.
- \fBwarning_invalid_invoice_signature\fR: Incorrect \fCsignature\fR.
.PP
If \fBtype\fR is \(dqbolt11 invoice\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBcurrency\fR (string): The BIP173 name for the currency.
- \fBcreated_at\fR (u64): The UNIX-style timestamp of the invoice.
- \fBexpiry\fR (u64): The number of seconds this is valid after \fCcreated_at\fR.
- \fBpayee\fR (pubkey): The public key of the recipient.
- \fBpayment_hash\fR (hash): The hash of the \fIpayment_preimage\fR.
- \fBsignature\fR (signature): Signature of the \fIpayee\fR on this invoice.
- \fBmin_final_cltv_expiry\fR (u32): The minimum CLTV delay for the final node.
- \fBamount_msat\fR (msat, optional): Amount the invoice asked for.
- \fBdescription\fR (string, optional): The description of the purpose of the purchase.
- \fBdescription_hash\fR (hash, optional): The hash of the description, in place of \fIdescription\fR.
- \fBpayment_secret\fR (secret, optional): The secret to hand to the payee node.
- \fBfeatures\fR (hex, optional): The features bitmap for this invoice.
- \fBpayment_metadata\fR (hex, optional): The payment_metadata to put in the payment.
- \fBfallbacks\fR (array of objects, optional): Onchain addresses.:
- \fBtype\fR (string) (one of \(dqP2PKH\(dq, \(dqP2SH\(dq, \(dqP2WPKH\(dq, \(dqP2WSH\(dq, \(dqP2TR\(dq): The address type (if known).
- \fBhex\fR (hex): Raw encoded address.
- \fBaddr\fR (string, optional): The address in appropriate format for \fItype\fR.
- \fBroutes\fR (array of arrays, optional): Route hints to the \fIpayee\fR.:
- (array of objects): Hops in the route.
- \fBpubkey\fR (pubkey): The public key of the node.
- \fBshort_channel_id\fR (short_channel_id): A channel to the next peer.
- \fBfee_base_msat\fR (msat): The base fee for payments.
- \fBfee_proportional_millionths\fR (u32): The parts-per-million fee for payments.
- \fBcltv_expiry_delta\fR (u32): The CLTV delta across this hop.
- \fBextra\fR (array of objects, optional): Any extra fields we didn't know how to parse.:
- \fBtag\fR (string) (always 1 characters): The bech32 letter which identifies this field.
- \fBdata\fR (string): The bech32 data for this field.
.PP
If \fBtype\fR is \(dqrune\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBvalid\fR (boolean) (always \fItrue\fR)
- \fBstring\fR (string): The string encoding of the rune.
- \fBrestrictions\fR (array of objects): Restrictions built into the rune: all must pass.:
- \fBalternatives\fR (array of strings): Each way restriction can be met: any can pass.:
- (string, optional): The alternative of form fieldname condition fieldname.
- \fBsummary\fR (string): Human-readable summary of this restriction.
- \fBunique_id\fR (string, optional): Unique id (always a numeric id on runes we create).
- \fBversion\fR (string, optional): Rune version, not currently set on runes we create.
.PP
If \fBtype\fR is \(dqrune\(dq, and \fBvalid\fR is \fIfalse\fR:
- \fBvalid\fR (boolean) (always \fIfalse\fR)
- \fBhex\fR (hex, optional): The raw rune in hex.
- the following warnings are possible:
- \fBwarning_rune_invalid_utf8\fR: The rune contains invalid UTF-8 strings.
.PP
If \fBtype\fR is \(dqemergency recover\(dq, and \fBvalid\fR is \fItrue\fR:
- \fBdecrypted\fR (hex): The decrypted value of the provided bech32 of emergency.recover. \fI(added v23.11)\fR
.SH
AUTHOR
.LP
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-pay(7), lightning-offer(7), lightning-fetchinvoice(7), lightning-sendinvoice(7), lightning-commando-rune(7)
.SH
RESOURCES
.LP
\fBBOLT #11\fR <\fIhttps://github.com/lightning/bolts/blob/master/11-payment-encoding.md\fR>
.PP
\fBBOLT #12\fR <\fIhttps://github.com/rustyrussell/lightning-rfc/blob/guilt/offers/12-offer-encoding.md\fR>
(experimental, \fBbolt\fR <\fIhttps://github.com/lightning/bolts\fR> #798)
.PP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli decode \(dqzFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:decode#1\(dq,
  \(dqmethod\(dq: \(dqdecode\(dq,
  \(dqparams\(dq: [
    \(dqzFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==\(dq
  ]
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqtype\(dq: \(dqrune\(dq,
  \(dqunique_id\(dq: \(dq0\(dq,
  \(dqstring\(dq: \(dqcc531dd5f8e1ac063151e140e784e396866a3adf09ac0fe2fe76302205e46a0e:=0\(dq,
  \(dqrestrictions\(dq: [],
  \(dqvalid\(dq: true
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli decode \(dqlnbcrt2u1pn2s3xxsp5cpcdj2cy5wpd2nphp2evrp9kqymxf9434zftkmdd6dlgmy8cu78qpp58yq5qf3h0694xwymzjs5e8eejce83vjmxv6cpwqv8cs9e05dxe4qdqcdserygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq9wlpxf8ur0q798646w94tduf6wfkaw7m0ecmxepgatd4utvsyvcy0pku9t8m39rlsjzhe8x53mup5jkn0f84clfj3ctc6qj09t35wxspycpup2\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:decode#2\(dq,
  \(dqmethod\(dq: \(dqdecode\(dq,
  \(dqparams\(dq: [
    \(dqlnbcrt2u1pn2s3xxsp5cpcdj2cy5wpd2nphp2evrp9kqymxf9434zftkmdd6dlgmy8cu78qpp58yq5qf3h0694xwymzjs5e8eejce83vjmxv6cpwqv8cs9e05dxe4qdqcdserygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq9wlpxf8ur0q798646w94tduf6wfkaw7m0ecmxepgatd4utvsyvcy0pku9t8m39rlsjzhe8x53mup5jkn0f84clfj3ctc6qj09t35wxspycpup2\(dq
  ]
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqtype\(dq: \(dqbolt11 invoice\(dq,
  \(dqcurrency\(dq: \(dqbcrt\(dq,
  \(dqcreated_at\(dq: 1722303686,
  \(dqexpiry\(dq: 604800,
  \(dqpayee\(dq: \(dq022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59\(dq,
  \(dqamount_msat\(dq: 200000,
  \(dqdescription\(dq: \(dql22 description\(dq,
  \(dqmin_final_cltv_expiry\(dq: 5,
  \(dqpayment_secret\(dq: \(dqc070d92b04a382d54c370ab2c184b601366496b1a892bb6dadd37e8d90f8e78e\(dq,
  \(dqfeatures\(dq: \(dq02024100\(dq,
  \(dqroutes\(dq: [
    [
      {
        \(dqpubkey\(dq: \(dq035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d\(dq,
        \(dqshort_channel_id\(dq: \(dq111x1x0\(dq,
        \(dqfee_base_msat\(dq: 1,
        \(dqfee_proportional_millionths\(dq: 10,
        \(dqcltv_expiry_delta\(dq: 6
      }
    ]
  ],
  \(dqpayment_hash\(dq: \(dq39014026377e8b53389b14a14c9f39963278b25b333580b80c3e205cbe8d366a\(dq,
  \(dqsignature\(dq: \(dq304402202bbe1324fc1bc1e29f55d38b55b789d3936ebbdb7e71b36428eadb5e2d90233002204786dc2acfb8947f84857c9cd48ef81a4ad37a4f5c7d328e178d024f2ae3471a\(dq,
  \(dqvalid\(dq: true
}
.EE
.PP
