.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-CHECKMESSAGE" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-checkmessage -- Command to check if a signature is from a node
.SH
SYNOPSIS
.LP
\fBcheckmessage\fR \fImessage\fR \fIzbase\fR [\fIpubkey\fR] 
.SH
DESCRIPTION
.LP
The \fBcheckmessage\fR RPC command is the counterpart to \fBsignmessage\fR: given a node id (\fIpubkey\fR), signature (\fIzbase\fR) and a \fImessage\fR, it verifies that the signature was generated by that node for that message (more technically: by someone who knows that node's secret).
.PP
As a special case, if \fIpubkey\fR is not specified, we will try every known node key (as per \fIlistnodes\fR), and verification succeeds if it matches for any one of them. Note: this is implemented far more efficiently than trying each one, so performance is not a concern.
.IP "\(bu" 2
\fBmessage\fR (string): Message to be checked against the signature.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBzbase\fR (string): The Zbase32 encoded signature to verify.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpubkey\fR (pubkey, optional): The Zbase32 encoded signature to verify.
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBverified\fR (boolean) (always \fItrue\fR): Whether the signature was valid.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpubkey\fR (pubkey): The \fIpubkey\fR parameter, or the pubkey found by looking for known nodes.
.SH
ERRORS
.LP
On failure, an error is returned and core lightning exit with the following error code:
.IP "\(bu" 2
-32602: Parameter missed or malformed;
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
1301: \fIpubkey\fR not found in the graph.
.SH
AUTHOR
.LP
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-signmessage(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli checkmessage -k \(dqmessage\(dq=\(dqtestcase to check new rpc error\(dq \(dqzbase\(dq=\(dqd66bqz3qsku5fxtqsi37j11pci47ydxa95iusphutggz9ezaxt56neh77kxe5hyr41kwgkncgiu94p9ecxiexgpgsz8daoq4tw8kj8yx\(dq \(dqpubkey\(dq=\(dq03be3b0e9992153b1d5a6e1623670b6c3663f72ce6cf2e0dd39c0a373a7de5a3b7\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:checkmessage#1\(dq,
  \(dqmethod\(dq: \(dqcheckmessage\(dq,
  \(dqparams\(dq: {
    \(dqmessage\(dq: \(dqtestcase to check new rpc error\(dq,
    \(dqzbase\(dq: \(dqd66bqz3qsku5fxtqsi37j11pci47ydxa95iusphutggz9ezaxt56neh77kxe5hyr41kwgkncgiu94p9ecxiexgpgsz8daoq4tw8kj8yx\(dq,
    \(dqpubkey\(dq: \(dq03be3b0e9992153b1d5a6e1623670b6c3663f72ce6cf2e0dd39c0a373a7de5a3b7\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpubkey\(dq: \(dq03be3b0e9992153b1d5a6e1623670b6c3663f72ce6cf2e0dd39c0a373a7de5a3b7\(dq,
  \(dqverified\(dq: true
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli checkmessage -k \(dqmessage\(dq=\(dqthis is a test!\(dq \(dqzbase\(dq=\(dqd6tqaeuonjhi98mmont9m4wag7gg4krg1f4txonug3h31e9h6p6k6nbwjondnj46dkyausobstnk7fhyy998bhgc1yr98dfmhb4k54d7\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:checkmessage#2\(dq,
  \(dqmethod\(dq: \(dqcheckmessage\(dq,
  \(dqparams\(dq: {
    \(dqmessage\(dq: \(dqthis is a test!\(dq,
    \(dqzbase\(dq: \(dqd6tqaeuonjhi98mmont9m4wag7gg4krg1f4txonug3h31e9h6p6k6nbwjondnj46dkyausobstnk7fhyy998bhgc1yr98dfmhb4k54d7\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpubkey\(dq: \(dq0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518\(dq,
  \(dqverified\(dq: true
}
.EE
.PP
