.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-DATASTORE" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-datastore -- Command for storing (plugin) data
.SH
SYNOPSIS
.LP
\fBdatastore\fR \fIkey\fR [\fIstring\fR] [\fIhex\fR] [\fImode\fR] [\fIgeneration\fR] 
.SH
DESCRIPTION
.LP
The \fBdatastore\fR RPC command allows plugins to store data in the Core Lightning database, for later retrieval.
.IP "\(bu" 2
\fBkey\fR (one of): A key can either have children or a value, never both: parents are created and removed automatically.:
.RS
.IP "\(bu" 2
(array of strings): An array of values to form a hierarchy (though a single value is treated as a one-element array). Using the first element of the key as the plugin name (e.g. \fC[ 'summary' ]\fR) is recommended.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(string, optional)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(string)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstring\fR (string, optional): Data to be saved in string format.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBhex\fR (hex, optional): Data to be saved in hex format.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBmode\fR (string, optional) (one of \(dqmust-create\(dq, \(dqmust-replace\(dq, \(dqcreate-or-replace\(dq, \(dqmust-append\(dq, \(dqcreate-or-append\(dq): Write mode to determine how the record is updated:
.RS
.IP "\(bu" 2
\fCmust-create\fR: fails if it already exists.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fCmust-replace\fR: fails if it doesn't already exist.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fCcreate-or-replace\fR: never fails.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fCmust-append\fR: must already exist, append this to what's already there.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fCcreate-or-append\fR: append if anything is there, otherwise create. The default is \fCmust-create\fR.
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBgeneration\fR (u64, optional): If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with \fImode\fR \fCmust-replace\fR or \fCmust-append\fR.
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBkey\fR (array of strings):
.RS
.IP "\(bu" 2
(string, optional): Part of the key added to the datastore.
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBgeneration\fR (u64, optional): The number of times this has been updated.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBhex\fR (hex, optional): The hex data which has been added to the datastore.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstring\fR (string, optional): The data as a string, if it's valid utf-8.
.SH
ERRORS
.LP
The following error codes may occur:
.IP "\(bu" 2
1202: The key already exists (and mode said it must not)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
1203: The key does not exist (and mode said it must)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
1204: The generation was wrong (and generation was specified)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
1205: The key has children already.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
1206: One of the parents already exists with a value.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
-32602: invalid parameters
.SH
AUTHOR
.LP
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-listdatastore(7), lightning-deldatastore(7), lightning-datastoreusage(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli datastore -k \(dqkey\(dq=\(dqsomekey\(dq \(dqhex\(dq=\(dq61\(dq \(dqmode\(dq=\(dqcreate-or-append\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:datastore#1\(dq,
  \(dqmethod\(dq: \(dqdatastore\(dq,
  \(dqparams\(dq: {
    \(dqkey\(dq: \(dqsomekey\(dq,
    \(dqhex\(dq: \(dq61\(dq,
    \(dqmode\(dq: \(dqcreate-or-append\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqkey\(dq: [
    \(dqsomekey\(dq
  ],
  \(dqgeneration\(dq: 0,
  \(dqhex\(dq: \(dq61\(dq,
  \(dqstring\(dq: \(dqa\(dq
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli datastore -k \(dqkey\(dq='[\(dqtest\(dq, \(dqname\(dq]' \(dqstring\(dq=\(dqsaving data to the store\(dq \(dqmode\(dq=\(dqmust-create\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:datastore#2\(dq,
  \(dqmethod\(dq: \(dqdatastore\(dq,
  \(dqparams\(dq: {
    \(dqkey\(dq: [
      \(dqtest\(dq,
      \(dqname\(dq
    ],
    \(dqstring\(dq: \(dqsaving data to the store\(dq,
    \(dqmode\(dq: \(dqmust-create\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqkey\(dq: [
    \(dqtest\(dq,
    \(dqname\(dq
  ],
  \(dqgeneration\(dq: 0,
  \(dqhex\(dq: \(dq736176696e67206461746120746f207468652073746f7265\(dq,
  \(dqstring\(dq: \(dqsaving data to the store\(dq
}
.EE
.PP
\fBExample 3\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli datastore -k \(dqkey\(dq=\(dqotherkey\(dq \(dqstring\(dq=\(dqfoo\(dq \(dqmode\(dq=\(dqmust-create\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:datastore#3\(dq,
  \(dqmethod\(dq: \(dqdatastore\(dq,
  \(dqparams\(dq: {
    \(dqkey\(dq: \(dqotherkey\(dq,
    \(dqstring\(dq: \(dqfoo\(dq,
    \(dqmode\(dq: \(dqmust-create\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqkey\(dq: [
    \(dqotherkey\(dq
  ],
  \(dqgeneration\(dq: 0,
  \(dqhex\(dq: \(dq666f6f\(dq,
  \(dqstring\(dq: \(dqfoo\(dq
}
.EE
.PP
\fBExample 4\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli datastore -k \(dqkey\(dq=\(dqotherkey\(dq \(dqstring\(dq=\(dqbar\(dq \(dqmode\(dq=\(dqmust-append\(dq \(dqgeneration\(dq=0
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:datastore#4\(dq,
  \(dqmethod\(dq: \(dqdatastore\(dq,
  \(dqparams\(dq: {
    \(dqkey\(dq: \(dqotherkey\(dq,
    \(dqstring\(dq: \(dqbar\(dq,
    \(dqmode\(dq: \(dqmust-append\(dq,
    \(dqgeneration\(dq: 0
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqkey\(dq: [
    \(dqotherkey\(dq
  ],
  \(dqgeneration\(dq: 1,
  \(dqhex\(dq: \(dq666f6f626172\(dq,
  \(dqstring\(dq: \(dqfoobar\(dq
}
.EE
.PP
