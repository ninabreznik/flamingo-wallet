.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-SPLICE_UPDATE" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-splice_update -- Command to initiate a channel to a peer
.SH
SYNOPSIS
.LP
\fB(WARNING: experimental-splicing only)\fR
.PP
\fBsplice_update\fR \fIchannel_id\fR \fIpsbt\fR 
.SH
DESCRIPTION
.LP
Command \fIadded\fR in v23.08.
.PP
\fCsplice_update\fR is a low level RPC command which updates the active channel splice associated with \fCchannel_id\fR.
.PP
\fCsplice_update\fR must be called repeatidly until the result \fCcommitments_secured\fR is \fCtrue\fR. Each time \fCsplice_update\fR is called, it will return a new PSBT that may have changes. In the simplest case, you take the returned \fCpsbt\fR and pass it back into \fCsplice_update\fR for the incoming \fCpsbt\fR field.
.PP
For more complex use cases, you may modify the \fCpsbt\fR both before calling \fCsplice_update\fR and inbetween subsequent calls until \fCcommitments_secured\fR is \fCtrue\fR. After which point you can no long make modifications to the PSBT (beyond signing, which comes later with \fCsplice_signed\fR).
.PP
Each \fCsplice_update\fR result may include changes to the PSBT specified by your channel peer. You can review these changes between calls to \fCsplice_update\fR to perform additional validation or strategy adjustment.
.PP
Typically, \fCsplice_update\fR will return \fCcommitments_secured\fR true after one call but you should assume it will need multiple calls.
.IP "\(bu" 2
\fBchannel_id\fR (hash): The channel id of the channel to be spliced.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpsbt\fR (string): The base 64 encoded PSBT returned from \fCsplice_init\fR with any changes added by the user.
.SH
USAGE
.LP
Here is an example way to call \fCsplice_update\fR
.LP
.EX
RESULT={\(dqcommitments_secured\(dq:false}
while [[ $(echo $RESULT | jq -r \(dq.commitments_secured\(dq) == \(dqfalse\(dq ]]
do
  RESULT=$(lightning-cli splice_update $CHANNEL_ID $PSBT)
  PSBT=$(echo $RESULT | jq -r \(dq.psbt\(dq)
  echo $RESULT
done
.EE
.PP
Before each call to \fCsplice_update\fR you have the opportunity to make additional changes.
.PP
Here is an example set of splice commands that will splice in 100,000 sats to the first channel that comes out of \fClistpeerchannels\fR.
.PP
The example assumes you already have at least one confirmed channel.
.PP
1: Get the channel id of the first channel.
.LP
.EX
CHANNEL_ID=$(echo $(lightning-cli listpeerchannels) | jq -r \(dq.channels[0].channel_id\(dq)
.EE
.PP
2: Get the PSBT from fundpsbt.
.LP
.EX
INITIALPSBT=$(echo $(lightning-cli fundpsbt -k satoshi=100000sat feerate=urgent startweight=800 excess_as_change=true) | jq -r \(dq.psbt\(dq)
.EE
.PP
3: Initiate the splice by passing channel id and initialpsbt received from above steps.
.LP
.EX
PSBT_SPLICE_INIT=$(echo $(lightning-cli splice_init $CHANNEL_ID 100000 $INITIALPSBT) | jq -r \(dq.psbt\(dq)
.EE
.PP
4: Update PSBTs with the splice_update command.
.LP
.EX
RESULT={\(dqcommitments_secured\(dq:false}
while [[ $(echo $RESULT | jq -r \(dq.commitments_secured\(dq) == \(dqfalse\(dq ]]
do
  PSBT_SPLICE_UPDATE=$(echo $(lightning-cli splice_update $CHANNEL_ID $PSBT_SPLICE_INIT) | jq -r \(dq.psbt\(dq)
  echo $PSBT_SPLICE_UPDATE
done
.EE
.PP
5: Sign the updated PSBT.
.LP
.EX
SIGNPSBT=$(echo $(lightning-cli signpsbt -k psbt=\(dq$PSBT_SPLICE_UPDATE\(dq) | jq -r \(dq.signed_psbt\(dq)
.EE
.PP
6: Finally, call splice_signed with channel id and signed PSBT parameters.
.LP
.EX
$ lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT
.EE
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBpsbt\fR (string): The (incomplete) PSBT of the splice transaction.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcommitments_secured\fR (boolean): Whether or not the commitments were secured.
.SH
AUTHOR
.LP
Dusty <<@dusty_daemon>> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-splice_init(7), lightning-splice_signed(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli splice_update -k \(dqchannel_id\(dq=\(dqf62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c\(dq \(dqpsbt\(dq=\(dqcHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQVHUiECVw7AtutUVmMwIYOmLqx10I/e62TzE1IZIGXWAcjKUh0hAmaGfDQrglCra07axtuuL95TeCtpzRcTmUn71PIISH/yUq4BDiD2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEPBAAAAAABEAQAAAAADPwJbGlnaHRuaW5nAQijTD4R+uEvhAABAwjOudoLAAAAAAEEIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGAM/AlsaWdodG5pbmcBCI/PBFM/C09aAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIreWkThWNrsoA\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:splice_update#1\(dq,
  \(dqmethod\(dq: \(dqsplice_update\(dq,
  \(dqparams\(dq: {
    \(dqchannel_id\(dq: \(dqf62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c\(dq,
    \(dqpsbt\(dq: \(dqcHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQVHUiECVw7AtutUVmMwIYOmLqx10I/e62TzE1IZIGXWAcjKUh0hAmaGfDQrglCra07axtuuL95TeCtpzRcTmUn71PIISH/yUq4BDiD2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEPBAAAAAABEAQAAAAADPwJbGlnaHRuaW5nAQijTD4R+uEvhAABAwjOudoLAAAAAAEEIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGAM/AlsaWdodG5pbmcBCI/PBFM/C09aAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIreWkThWNrsoA\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpsbt\(dq: \(dqcHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQAAAAAARAEAAAAAAz8CWxpZ2h0bmluZwEIo0w+EfrhL4QAAQMIzrnaCwAAAAABBCJRII+O1EYnVX28zEKuAYqcVHSpkShXksTKiRwfWcVmXTRgDPwJbGlnaHRuaW5nAQiPzwRTPwtPWgABAwjgyBAAAAAAAAEEIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYM/AlsaWdodG5pbmcBCK3lpE4Vja7KAA==\(dq,
  \(dqcommitments_secured\(dq: true
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli splice_update \(dqf62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c\(dq \(dqcHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBBUdSIQJXDsC261RWYzAhg6YurHXQj97rZPMTUhkgZdYByMpSHSECZoZ8NCuCUKtrTtrG264v3lN4K2nNFxOZSfvU8ghIf/JSrgEOIJW7FYF67zRaxARLQco1KmOXtFQY8yFwpGexdGngFEX4AQ8EAQAAAAEQBAAAAAAM/AlsaWdodG5pbmcBCF4tdoSn7LwCAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIGQ1Quuj5CvAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaDPwJbGlnaHRuaW5nAQi4FyJ2dePgEAA=\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:splice_update#2\(dq,
  \(dqmethod\(dq: \(dqsplice_update\(dq,
  \(dqparams\(dq: [
    \(dqf62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c\(dq,
    \(dqcHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBBUdSIQJXDsC261RWYzAhg6YurHXQj97rZPMTUhkgZdYByMpSHSECZoZ8NCuCUKtrTtrG264v3lN4K2nNFxOZSfvU8ghIf/JSrgEOIJW7FYF67zRaxARLQco1KmOXtFQY8yFwpGexdGngFEX4AQ8EAQAAAAEQBAAAAAAM/AlsaWdodG5pbmcBCF4tdoSn7LwCAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIGQ1Quuj5CvAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaDPwJbGlnaHRuaW5nAQi4FyJ2dePgEAA=\(dq
  ]
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpsbt\(dq: \(dqcHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBDiCVuxWBeu80WsQES0HKNSpjl7RUGPMhcKRnsXRp4BRF+AEPBAEAAAABEAQAAAAADPwJbGlnaHRuaW5nAQheLXaEp+y8AgABAwi4Lg8AAAAAAAEEIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYM/AlsaWdodG5pbmcBCBkNULro+QrwAAEDCKCGAQAAAAAAAQQiUSDE0oJBX5qB0Y4IthmhnRFrhlbLG/ST5fVAu/e3oFhM2gz8CWxpZ2h0bmluZwEIuBcidnXj4BAA\(dq,
  \(dqcommitments_secured\(dq: true
}
.EE
.PP
