.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-FUNDPSBT" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-fundpsbt -- Command to populate PSBT inputs from the wallet
.SH
SYNOPSIS
.LP
\fBfundpsbt\fR \fIsatoshi\fR \fIfeerate\fR \fIstartweight\fR [\fIminconf\fR] [\fIreserve\fR] [\fIlocktime\fR] [\fImin_witness_weight\fR] [\fIexcess_as_change\fR] [\fInonwrapped\fR] [\fIopening_anchor_channel\fR] 
.SH
DESCRIPTION
.LP
\fCfundpsbt\fR is a low-level RPC command which creates a PSBT using unreserved inputs in the wallet, optionally reserving them as well.
.IP "\(bu" 2
\fBsatoshi\fR (sat_or_all): The minimum satoshi value of the output(s) needed (or the string \fCall\fR meaning use all unreserved inputs). If a value, it can be a whole number, a whole number ending in \fIsat\fR, a whole number ending in \fI000msat\fR, or a number with 1 to 8 decimal places ending in \fIbtc\fR.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfeerate\fR (feerate): Used for the transaction as initial feerate. The default is \fInormal\fR.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstartweight\fR (u32): The weight of the transaction before \fIfundpsbt\fR has added any inputs.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBminconf\fR (u32, optional): The minimum number of confirmations that used outputs should have. The default is 1.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBreserve\fR (u32, optional): If not zero, then \fIreserveinputs\fR is called (successfully, with \fIexclusive\fR true) on the returned PSBT for this number of blocks. The default is 72 blocks.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlocktime\fR (u32, optional): The locktime of the transaction. if not set, it is set to a recent block height.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBmin_witness_weight\fR (u32, optional): Minimum weight to use for a UTXO's witness. If the actual witness weight is greater than the provided minimum, the actual witness weight will be used.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexcess_as_change\fR (boolean, optional): Flag to add a change output for the excess sats.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBnonwrapped\fR (boolean, optional): To signal to filter out any p2sh-wrapped inputs from funding this PSBT. \fI(added v23.02)\fR
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBopening_anchor_channel\fR (boolean, optional): To signel that it needs emergency reserve for anchors so that we can lowball our commitment tx fees, and min-emergency-msat for reserving some sats for closing anchor channels. \fI(added v23.08)\fR
.SH
USAGE
.LP
Let's assume the caller is trying to produce a 100,000 satoshi output.
.PP
First, the caller estimates the weight of the core (typically 42) and known outputs of the transaction (typically (9 + scriptlen) * 4). For a simple P2WPKH it's a 22 byte scriptpubkey, so that's 124 weight.
.PP
It calls \(dq\fIfundpsbt\fR 100000sat slow 166\(dq, which succeeds, and returns the \fIpsbt\fR and \fIfeerate_per_kw\fR it used, the \fIestimated_final_weight\fR and any \fIexcess_msat\fR.
.PP
If \fIexcess_msat\fR is greater than the cost of adding a change output, the caller adds a change output randomly to position 0 or 1 in the PSBT. Say \fIfeerate_per_kw\fR is 253, and the change output is a P2WPKH (weight 124), the cost is around 31 sats. With the dust limit disallowing payments below 546 satoshis, we would only create a change output if \fIexcess_msat\fR was greater or equal to 31 + 546.
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBpsbt\fR (string): Unsigned PSBT which fulfills the parameters given.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfeerate_per_kw\fR (u32): The feerate used to create the PSBT, in satoshis-per-kiloweight.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBestimated_final_weight\fR (u32): The estimated weight of the transaction once fully signed.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexcess_msat\fR (msat): The amount above \fIsatoshi\fR which is available. This could be zero, or dust; it will be zero if \fIchange_outnum\fR is also returned.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBchange_outnum\fR (u32, optional): The 0-based output number where change was placed (only if parameter \fIexcess_as_change\fR was true and there was sufficient funds).
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBreservations\fR (array of objects, optional): If \fIreserve\fR was true or a non-zero number, just as per lightning- reserveinputs(7).:
.RS
.IP "\(bu" 2
\fBtxid\fR (txid): The txid of the transaction.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvout\fR (u32): The 0-based output number.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwas_reserved\fR (boolean) (always \fIfalse\fR): Whether this output was previously reserved.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBreserved\fR (boolean) (always \fItrue\fR): Whether this output is now reserved.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBreserved_to_block\fR (u32): The blockheight the reservation will expire.
.RE
.LP
If \fIexcess_as_change\fR is true and the excess is enough to cover an additional output above the \fCdust_limit\fR, then an output is added to the PSBT for the excess amount. The \fIexcess_msat\fR will be zero. A \fIchange_outnum\fR will be returned with the index of the change output.
.SH
ERRORS
.LP
On error the returned object will contain \fCcode\fR and \fCmessage\fR properties, with \fCcode\fR being one of the following:
.IP "\(bu" 2
-32602: If the given parameters are wrong.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
-1: Catchall nonspecific error.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
301: Insufficient UTXOs to meet \fIsatoshi\fR value.
.SH
AUTHOR
.LP
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-utxopsbt(7), lightning-reserveinputs(7), lightning-unreserveinputs(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli fundpsbt -k \(dqsatoshi\(dq=1000000 \(dqfeerate\(dq=\(dq253perkw\(dq \(dqstartweight\(dq=250 \(dqreserve\(dq=0
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:fundpsbt#1\(dq,
  \(dqmethod\(dq: \(dqfundpsbt\(dq,
  \(dqparams\(dq: {
    \(dqsatoshi\(dq: 1000000,
    \(dqfeerate\(dq: \(dq253perkw\(dq,
    \(dqstartweight\(dq: 250,
    \(dqreserve\(dq: 0
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpsbt\(dq: \(dqcHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AahhAAAAAAAAIlEg+3d9jpNmK0getyg5W+Mp31CPIRDKcJg/mZs/uaVrQ+GZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA\(dq,
  \(dqfeerate_per_kw\(dq: 253,
  \(dqestimated_final_weight\(dq: 693,
  \(dqexcess_msat\(dq: 196962507000,
  \(dqchange_outnum\(dq: 0
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli fundpsbt -k \(dqsatoshi\(dq=500000 \(dqfeerate\(dq=\(dqurgent\(dq \(dqstartweight\(dq=166 \(dqreserve\(dq=0 \(dqexcess_as_change\(dq=True \(dqmin_witness_weight\(dq=110
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:fundpsbt#2\(dq,
  \(dqmethod\(dq: \(dqfundpsbt\(dq,
  \(dqparams\(dq: {
    \(dqsatoshi\(dq: 500000,
    \(dqfeerate\(dq: \(dqurgent\(dq,
    \(dqstartweight\(dq: 166,
    \(dqreserve\(dq: 0,
    \(dqexcess_as_change\(dq: true,
    \(dqmin_witness_weight\(dq: 110
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpsbt\(dq: \(dqcHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AfZRxQsAAAAAIlEg21kTTo7K2doCG6F2JqgaDjc1kRCrH7AL08oPVVJhuE+ZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA\(dq,
  \(dqfeerate_per_kw\(dq: 11000,
  \(dqestimated_final_weight\(dq: 612,
  \(dqexcess_msat\(dq: 0,
  \(dqchange_outnum\(dq: 0
}
.EE
.PP
