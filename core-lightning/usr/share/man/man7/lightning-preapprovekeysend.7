.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-PREAPPROVEKEYSEND" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-preapprovekeysend -- Ask the HSM to preapprove a keysend payment (low-level)
.SH
SYNOPSIS
.LP
\fBpreapprovekeysend\fR \fIdestination\fR \fIpayment_hash\fR \fIamount_msat\fR 
.SH
DESCRIPTION
.LP
Command \fIadded\fR in v23.02.
.PP
The \fBpreapprovekeysend\fR RPC command submits the \fIdestination\fR, \fIpayment_hash\fR, and \fIamount_msat\fR parameters to the HSM to check that they are approved as a keysend payment.
.PP
Generally the \fBpreapprovekeysend\fR request does not need to be made explicitly, it is automatically generated as part of a \fBkeysend\fR request.
.PP
By default, the HSM will approve all \fBpreapprovekeysend\fR requests.
.PP
If a remote signer is being used it might decline an \fBpreapprovekeysend\fR request because it would exceed velocity controls, is not covered by allowlist controls, was declined manually, or other reasons.
.PP
If a remote signer declines a \fBpreapprovekeysend\fR request a subsequent attempt to pay the keysend anyway will fail; the signer will refuse to sign the commitment.
.IP "\(bu" 2
\fBdestination\fR (pubkey): It is a 33 byte, hex-encoded, node ID of the node that the payment should go to. \fI(added v23.02)\fR
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_hash\fR (hex) (always 64 characters): It is the unique identifier of a payment. \fI(added v23.02)\fR
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBamount_msat\fR (msat): The amount to send in millisatoshi precision; it can be a whole number, or a whole number with suffix \fCmsat\fR or \fCsat\fR, or a three decimal point number with suffix \fCsat\fR, or an 1 to 11 decimal point number suffixed by \fCbtc\fR. \fI(added v23.02)\fR
.SH
RETURN VALUE
.LP
On success, an empty object is returned.
.SH
AUTHOR
.LP
Ken Sedgwick <\fIken@bonsai.com\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-keysend(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli preapprovekeysend -k \(dqdestination\(dq=\(dq022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59\(dq \(dqpayment_hash\(dq=\(dq0000000000000000000000000000000000000000000000000000000000000000\(dq \(dqamount_msat\(dq=1000
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:preapprovekeysend#1\(dq,
  \(dqmethod\(dq: \(dqpreapprovekeysend\(dq,
  \(dqparams\(dq: {
    \(dqdestination\(dq: \(dq022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59\(dq,
    \(dqpayment_hash\(dq: \(dq0000000000000000000000000000000000000000000000000000000000000000\(dq,
    \(dqamount_msat\(dq: 1000
  }
}
.EE
.PP
Response:
.LP
.EX
{}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli preapprovekeysend \(dq032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e\(dq \(dq0101010101010101010101010101010101010101010101010101010101010101\(dq \(dq2000\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:preapprovekeysend#2\(dq,
  \(dqmethod\(dq: \(dqpreapprovekeysend\(dq,
  \(dqparams\(dq: [
    \(dq032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e\(dq,
    \(dq0101010101010101010101010101010101010101010101010101010101010101\(dq,
    2000
  ]
}
.EE
.PP
Response:
.LP
.EX
{}
.EE
.PP
