.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-INVOICE" "7" "" "Core Lightning pre-v24.08" ""
.SH
NAME
.LP
lightning-invoice -- Command for accepting payments
.SH
SYNOPSIS
.LP
\fBinvoice\fR \fIamount_msat\fR \fIlabel\fR \fIdescription\fR [\fIexpiry\fR] [\fIfallbacks\fR] [\fIpreimage\fR] [\fIexposeprivatechannels\fR] [\fIcltv\fR] [\fIdeschashonly\fR] 
.SH
DESCRIPTION
.LP
The \fBinvoice\fR RPC command creates the expectation of a payment of a given amount of milli-satoshi: it returns a unique token which another lightning daemon can use to pay this invoice. This token includes a \fIroute hint\fR description of an incoming channel with capacity to pay the invoice, if any exists.
.IP "\(bu" 2
\fBamount_msat\fR (msat_or_any): The string \fCany\fR, which creates an invoice that can be paid with any amount. Otherwise it is a positive value in millisatoshi precision; it can be a whole number, or a whole number ending in \fImsat\fR or \fIsat\fR, or a number with three decimal places ending in \fIsat\fR, or a number with 1 to 11 decimal places ending in \fIbtc\fR.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlabel\fR (one of): A unique string or number (which is treated as a string, so \fC01\fR is different from \fC1\fR); it is never revealed to other nodes on the lightning network, but it can be used to query the status of this invoice.:
.RS
.IP "\(bu" 2
(string)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(integer)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBdescription\fR (string): A short description of purpose of payment, e.g. \fI1 cup of coffee\fR. This value is encoded into the BOLT11 invoice and is viewable by any node you send this invoice to (unless \fIdeschashonly\fR is true as described below). It must be UTF-8, and cannot use \fI\eu\fR JSON escape codes.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexpiry\fR (u64, optional): The time the invoice is valid for, in seconds. If no value is provided the default of 604800 (1 week) is used.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfallbacks\fR (array of strings, optional): One or more fallback addresses to include in the invoice (in order from most- preferred to least): note that these arrays are not currently tracked to fulfill the invoice.:
.RS
.IP "\(bu" 2
(string, optional)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpreimage\fR (hex, optional): A 64-digit hex string to be used as payment preimage for the created invoice. By default, if unspecified, lightningd will generate a secure pseudorandom preimage seeded from an appropriate entropy source on your system. \fBIMPORTANT\fR: if you specify the \fIpreimage\fR, you are responsible, to ensure appropriate care for generating using a secure pseudorandom generator seeded with sufficient entropy, and keeping the preimage secret. This parameter is an advanced feature intended for use with cutting-edge cryptographic protocols and should not be used unless explicitly needed.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexposeprivatechannels\fR (one of, optional): If specified, it overrides the default route hint logic, which will use unpublished channels only if there are no published channels.:
.RS
.IP "\(bu" 2
(boolean): If \fITrue\fR unpublished channels are always considered as a route hint candidate; if \fIFalse\fR, never.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(array of short_channel_ids): Array of short channel ids (or a remote alias), only those specific channels will be considered candidates, even if they are public or dead-ends.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(short_channel_id, optional)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
(short_channel_id): If it is a short channel id (e.g. \fI1x1x3\fR), only this specific channel will be considered candidate, even if it is public or dead-end.
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcltv\fR (u32, optional): If specified, sets the \fImin_final_cltv_expiry\fR for the invoice. Otherwise, it's set to the parameter \fBcltv-final\fR.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBdeschashonly\fR (boolean, optional): If True, then the bolt11 returned contains a hash of the \fIdescription\fR, rather than the \fIdescription\fR itself: this allows much longer descriptions, but they must be communicated via some other mechanism. The default is False.
.SH
RETURN VALUE
.LP
On success, an object is returned, containing:
.IP "\(bu" 2
\fBbolt11\fR (string): The bolt11 string.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_hash\fR (hash): The hash of the \fIpayment_preimage\fR which will prove payment.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_secret\fR (secret): The \fIpayment_secret\fR to place in the onion.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexpires_at\fR (u64): UNIX timestamp of when invoice expires.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcreated_index\fR (u64): 1-based index indicating order this invoice was created in. \fI(added v23.08)\fR
.LP
The following warnings may also be returned:
.IP "\(bu" 2
\fBwarning_capacity\fR: Even using all possible channels, there's not enough incoming capacity to pay this invoice.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_offline\fR: There would be enough incoming capacity, but some channels are offline, so there isn't.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_deadends\fR: There would be enough incoming capacity, but some channels are dead-ends (no other public channels from those peers), so there isn't.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_private_unused\fR: There would be enough incoming capacity, but some channels are unannounced and \fIexposeprivatechannels\fR is \fIfalse\fR, so there isn't.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_mpp\fR: There is sufficient capacity, but not in a single channel, so the payer will have to use multi-part payments.
.SH
ERRORS
.LP
On failure, an error is returned and no invoice is created. If the
lightning process fails before responding, the caller should use
lightning-listinvoices(7) to query whether this invoice was created or
not.
.PP
The following error codes may occur:
.IP "\(bu" 2
-1: Catchall nonspecific error.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
900: An invoice with the given \fIlabel\fR already exists.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
901: An invoice with the given \fIpreimage\fR already exists.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
902: None of the specified \fIexposeprivatechannels\fR were usable.
.SH
AUTHOR
.LP
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH
SEE ALSO
.LP
lightning-listinvoices(7), lightning-delinvoice(7), lightning-pay(7)
.SH
RESOURCES
.LP
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
.SH
EXAMPLES
.LP
\fBExample 1\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli invoice -k \(dqamount_msat\(dq=10000 \(dqlabel\(dq=\(dqlbl_l31\(dq \(dqdescription\(dq=\(dqInvoice description l31\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:invoice#1\(dq,
  \(dqmethod\(dq: \(dqinvoice\(dq,
  \(dqparams\(dq: {
    \(dqamount_msat\(dq: 10000,
    \(dqlabel\(dq: \(dqlbl_l31\(dq,
    \(dqdescription\(dq: \(dqInvoice description l31\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpayment_hash\(dq: \(dqd598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2\(dq,
  \(dqexpires_at\(dq: 1722908474,
  \(dqbolt11\(dq: \(dqlnbcrt100n1pn2s396sp5v3en0qa3rrljw4m0wtz88sx99q20rarufhjpfysefhwhs42gvqjqpp56kvvl33d594nsxu0hzhesvazgqzlwv89fnpjcvtlanz3rl7x623qdp9f9h8vmmfvdjjqer9wd3hy6tsw35k7m3qdsenzxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq7za6z8kx2k5nul45zwttfz2njx3836v69mxqsl4ty9228pyjrkfnkymysy8ygsrrje9qf6j4tpalt5qkqusfp2esrsqc5ak7t4yzajgpezef54\(dq,
  \(dqpayment_secret\(dq: \(dq64733783b118ff27576f72c473c0c52814f1f47c4de41492194ddd7855486024\(dq,
  \(dqcreated_index\(dq: 2
}
.EE
.PP
\fBExample 2\fR: 
.PP
Request:
.LP
.EX
$ lightning-cli invoice -k \(dqamount_msat\(dq=\(dq50000msat\(dq \(dqlabel\(dq=\(dqlbl_l32\(dq \(dqdescription\(dq=\(dql32 description\(dq
.EE
.LP
.EX
{
  \(dqid\(dq: \(dqexample:invoice#2\(dq,
  \(dqmethod\(dq: \(dqinvoice\(dq,
  \(dqparams\(dq: {
    \(dqamount_msat\(dq: \(dq50000msat\(dq,
    \(dqlabel\(dq: \(dqlbl_l32\(dq,
    \(dqdescription\(dq: \(dql32 description\(dq
  }
}
.EE
.PP
Response:
.LP
.EX
{
  \(dqpayment_hash\(dq: \(dq788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e\(dq,
  \(dqexpires_at\(dq: 1722908474,
  \(dqbolt11\(dq: \(dqlnbcrt500n1pn2s396sp5h5tz6fpm3dxvrlwcnwmfq85v45wfj43mdmplpce6ku2vmfdhrx5qpp50z9w5u57meydx9dpn889mmtkz6tqrfsa65hfwd88ql4hc5hyu70qdqcdsenygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqt5m8qx0t25a0gygya7u4sxulyyp2dec87pwsxuuwtg0u66c07703g9j6vlwgmlhqk7qgn95qw7allhnuj2m9hf0xkcr2zkaxltv3t6gqjcdpll\(dq,
  \(dqpayment_secret\(dq: \(dqbd162d243b8b4cc1fdd89bb6901e8cad1c99563b6ec3f0e33ab714cda5b719a8\(dq,
  \(dqcreated_index\(dq: 3
}
.EE
.PP
